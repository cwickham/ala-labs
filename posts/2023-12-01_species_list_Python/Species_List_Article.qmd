---
title: "Make a species list for a Local Government Area (LGA) in Python and R"
description: |
  Knowing what species have been observed in a local area is an important, regular task for ecosystem management and environmental impact assessment. Here we show how to use `galah-python` to make a species list using layers available in `galah-python` or using a shapefile, and how to cross-reference this list with threatened species lists determine if threatened species are in your LGA.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2023-12-01"
title-block-banner: "#B8573E"
include-after-body: _footer.html
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Summaries
  - Python
  - R
image: tbd
draft: true
freeze: false
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
1 December 2023

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Knowing what species inhabit an area is important for conservation and ecosystem management. It is also useful to know how common or rare each species might be, or how many species are threatened or endangered in a given area.

Species lists are a common tool to find what species are in a given area for monitoring and environmental impact assessments. Often, these lists are asked to be produced for specific regions like Local Government Areas (LGAs) or specific monitoring locations within a region.

In this post, we will show you how to generate a species list for an Local Government Area—the Yass Valley—over the past year in either Python or R.

# Make a species list

There are two ways to narrow a query to return information for a specific region:  

  * Using fields available in `galah-python` (downloaded from the ALA)
  * Using a shapefile
  
The method you choose depends on whether the region you wish to return species for is already within `galah-python`, or whether you require a list for a more specific area defined by a shapefile.

Let's go through each of the methods in turn to return a list of species in the Yass Valley in 2023.

```{python}
#| echo: false
#| eval: true
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
```

First, let's import galah.

```{python}
import galah
```

## Use an existing spatial field

### Search for fields

Let's find which fields and layers exist within `galah-python` to narrow our query to a specific LGA region and year.

We can use the `search_all()` function to search for many types of information in `galah-python`. Let's use it to look up what `field`s contain the word "year". Our search returns several options, though the best option seems to be the field `id` `"year"`.

```{python}
galah.search_all(fields="year")
```

To double check whether a given field contains the information we are interested in, we can use `show_values()` to see what values are *within* the `"year"`.

```{python}
galah.show_values(field="year")
```

Let's use the same process to search for a `field` containing spatial data of Local Government Areas. Our search returns a few options.

```{python}
galah.search_all(fields="Local Government Areas")
```

The field `cl10923` seems to be contain the most recent data from 2018. Let's check what this values this `field` contains.

```{python}
galah.show_values(field="cl10923")
```

We can use search for the value "Yass Valley" specifically with `search_values()`.

```{python}
galah.search_values(field="cl10923", value = "YASS VALLEY")
```


::: {.callout-note}
Each spatial layer has a two letter code, along with a number to identify it.  The abbreviations are as follows:

  * `cl` = contextual layer (i.e. boundaries of LGAs, Indigenous Protected Areas, States/Territories etc.)  
  * `10923` = number associated with the spatial layer in the atlas

:::


### Download data

Now we can build a query to return species observed in Yass Valley over 2023. We can use `atlas_species()` to return a species list, and use the `filters` argument to narrow our query.

```{python}
galah.atlas_species(filters=["year=2023","cl10923=YASS VALLEY COUNCIL"])
```

To add the observation count for each species, add `counts=True`.

```{python}
species_yass = galah.atlas_species(filters=["year=2023","cl10923=YASS VALLEY COUNCIL"],counts=True)
species_yass
```

To save this species list as a csv, we can use `to_csv()` from the `pandas dataframe` package.

```{python}
#| eval: false
species_yass.to_csv("Species_List_Yass_Valley_Counts_ALA_Spatial_Filter.csv")
```


## Shapefile

### Download shapefile

Let's download the latest Local Government Areas data from the [Australian Bureau of Statistics Digital Boundary files page](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files).  Find "Local Government Areas - 2023 - Shapefile" and click "Download ZIP". Save the zip folder in your current directory and unzip it.

We'll use `read_file()` from `geopandas` to load our shapefile.

```{python}
#| eval: false
#| echo: true
import geopandas as gpd
LGAs_2023 = gpd.read_file("LGA_2023_AUST_GDA2020.shp")
LGAs_2023
```

```{python}
#| echo: false
#| eval: true
import geopandas as gpd

# Load LGA boundaries
## Note: For rendering, you can find this data in the Science & Decision Support team folder in Data/ala-labs
LGAs_2023 = gpd.read_file("../data/LGA_2023/LGA_2023_AUST_GDA2020.shp")
LGAs_2023
```

Now let's use `to_crs()` to set the Coordinate Reference System (CRS) of our shapefile.  A CRS refers to how coordinates on the spherical earth are oriented onto a flat, two-dimensional map. ALA observations are projected using [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System) (the standard used in cartography and GPS), also known as [EPSG](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset):4326. 

```{python}
LGAs_2023 = LGAs_2023.to_crs(4326)
LGAs_2023.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,5))
```

We'll filter our shapefile to only Yass Valley. 

The column `LGA_NAME23` appears to contain names we can use to filter our `Dataframe`. Let's filter `LGA_NAME23` to return only the row containing `Yass Valley`.

```{python}
yass_valley = LGAs_2023[LGAs_2023['LGA_NAME23'] == "Yass Valley"]
yass_valley
```

The column `geometry` contains information to draw our LGA shape. Let's select just this column.

```{python}
yass_valley["geometry"]
```

Now that we have the polygon stored as `yass_valley_geometry`, we can pass it to the `polygon` argument of `atlas_species()`. We can also narrow our query to only 2023 observations by adding `year` to `filters`, and add the observation count of each species by addint `counts=True`.

```{python}
species_yass = galah.atlas_species(polygon=yass_valley["geometry"],filters="year=2023",counts=True)
species_yass
```

To save this species list as a csv, we can use `to_csv()` from the `pandas dataframe` package.

```{python}
#| eval: false
species_yass.to_csv("Species_List_Yass_Valley_Counts_ALA_Spatial_Filter.csv")
```


## Use threatened species list

Often, it's useful to know what species in a given location are threatened or sensitive species. The ALA contains many lists, including national and regional threatened species lists, so it's possible to use `galah-python` to find which species are threatened or sensitive to extinction risk.

Let's use `search_all()` again, this time using the `lists` option with the text `New South Wales` to return only the lists available in the ALA that reference New South Wales, along with their `listType` and other helpful.

```{python}
galah.search_all(lists="New South Wales")
```

If you scroll to the right in the table and look for the column `listType`.  Here, we can see the "New South Wales : Conservation Status" list is a `CONSERVATION_LIST`, while the "New South Wales Sensitive Species List" list is a `SENSITIVE_LIST`.  We can confirm this by looking at the columns `isAuthoritative` and `isThreatened`.  In these columns we can see that the "New South Wales : Conservation Status" list is both authoritative and a list of threatened species, while the "New South Wales Sensitive Species List" list is authoritative, but isn't a list of threatened species.  Since we are searching for only threatened species in our example, we will use the "New South Wales : Conservation Status" list, which has an id of `dr650`.

To narrow a query to species on a species list (despite the column name of the lists reading `dataResourceUid`), use the field `species_list_uid` to supply the species list `id` of our desired list to the `filters` argument.

```{python}
galah.atlas_species(polygon=yass_valley_geometry,filters=["year=2023","species_list_uid=dr650"],counts=True)
```

To save this species list as a csv, we can use `to_csv()` from the `pandas dataframe` package.

```{python}
#| eval: false
threatened_species_yass.to_csv("Threatened_Species_List_Yass_Valley_Counts_ALA_Spatial_Filter.csv")
```

# Final thoughts

We hope this post has showed you a direct way make a species list using multiple methods with spatial layers, and understand how to determine if any threatened or sensitive species are in your area.

For other Python posts, check out [How to make a map in less than 5 minutes](ala-labs.org.au), or a more advanced version, [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).

To request more posts like this, or to ask further questions, feel free to [email us](support@ala.org.au).

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>
