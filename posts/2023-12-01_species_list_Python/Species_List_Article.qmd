---
title: "Make a species list for an area and compare with threatened species"
description: |
  Knowing what species have been observed in a local area is an important, regular task for ecosystem management and environmental impact assessment. Here we show how to make a species list with {galah} and how to cross-reference this list with a threatened species list.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2023-12-01"
title-block-banner: "#B8573E"
include-after-body: _footer.html
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Summaries
  - Python
  - R
image: tbd
draft: true
freeze: false
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
1 December 2023

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Knowing what species inhabit an area is important for conservation and ecosystem management. In particular, it can help us find how many known species are in a given area, whether each species is common or rare and whether any species are threatened or endangered.

In this post, we will use the `galah-python`, `geopandas`, `matplotlib` and `pywaffle` packages to show you how to visualise the number of threatened and sensitive species in the Yass Valley in 2023. 

# Make a species list

There are two ways to narrow a query to return information for a specific region:  

  * Using fields available in `galah-python` (downloaded from the ALA)
  * Using a shapefile
  
The method you choose depends on whether the region you wish to return species for is already within `galah-python`, or whether you require a list for a more specific area defined by a shapefile.

::: {.panel-tabset .nav-pills}

# fields

```{python}
#| echo: false
#| eval: true
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
```

## Find LGAs in the ALA

To find which fields and layers exist within `galah-python` to narrow our query, we can use the `search_all()` function. We will be using the field `year` for 2023, but need to find what data the ALA has on LGAs.

```{python}
import galah
import geopandas as gpd
galah.search_all(fields="Local Government Areas")
```

The field `cl10923`[^1] is the most recent data (from 2018). Since we know there are a lot 
of LGAs, we can do a text search to see what the Yass Valley is called in the shapefile.

[^1]: Each spatial layer has a two letter code, along with a number to identify it. The abbreviations are as follows:
  * `cl` = contextual layer (i.e. boundaries of LGAs, Indigenous Protected Areas, States/Territories etc.)  
  * `10923` = number associated with the spatial layer in the atlas

```{python}
galah.search_values(field="cl10923", value = "YASS VALLEY")
```

## Download data

We can now build our query. We can use `atlas_species()` to return a species list, and use the `filters` argument to narrow our query. To add the observation count for each species, add `counts=True`.

```{python}
species_yass = galah.atlas_species(
  filters=["year=2023","cl10923=YASS VALLEY COUNCIL"],
  counts=True
)
species_yass
```

# Shapefile

## Download shapefile

To retrieve the spatial outline of Yass Valley, let's download the latest Local Government Areas data from the [Australian Bureau of Statistics Digital Boundary files page](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Find "Local Government Areas - 2023 - Shapefile" and click "Download ZIP". Save the zip folder in your current directory and unzip it.

We'll use `read_file()` from `geopandas` to load our shapefile.

```{python}
#| eval: false
#| echo: true
LGAs_2023 = gpd.read_file("LGA_2023_AUST_GDA2020.shp")
```

```{python}
#| echo: false
#| eval: true
# Load LGA boundaries
## Note: For rendering, you can find this data in the Science & Decision Support team folder in Data/ala-labs
LGAs_2023 = gpd.read_file("../data/LGA_2023/LGA_2023_AUST_GDA2020.shp")
```

Now let's use `to_crs()` to set the Coordinate Reference System (CRS) of our shapefile to [EPSG](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset):4326 (the standard used in cartography and GPS, also known as [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)) so that it matches the projection of our data from the ALA [^2]. 

[^2]: Check out [this post](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/post.html#make-a-map) for a better explanation of what CRS is and how it affects maps.

```{python}
LGAs_2023 = LGAs_2023.to_crs(4326)
```

Next we can filter our shapefile to only Yass Valley. The column `LGA_NAME23` contains area names, and we can filter our `Dataframe` to only rows where `LGA_NAME23` is equal to `Yass Valley`.

```{python}
yass_valley = LGAs_2023[LGAs_2023['LGA_NAME23'] == "Yass Valley"]
yass_valley["geometry"]
```

## Download data

Now that `yass_geometry` contains our LGA shape, we can now build our query. We will pass our shape to the `polygon` argument of `atlas_species()`, add the year to `filters` and add the observation count for each species with `counts=True`.

```{python}
species_yass = galah.atlas_species(
  polygon=yass_valley["geometry"][127],
  filters="year=2023",
  counts=True
  )
species_yass
```
:::

# Filter species by list

Many users may want to filter this species list down to threatened and sensitive species. You 
can do this one of two ways: 

  * ALA Lists that are pre-loaded
  * Your own list

One way to match our lists is to match species names in the threatened species list to names in our Yass Valley list.  However, this can be fiddly if there are text errors, added spaces or discrepancies in naming conventions.  Luckily, `galah-python` can use a list as a filter, restricting the result to only species names that match the specified list ID.  In addition, you 
can also match these species against your own list.

::: {.panel-tabset .nav-pills}

# ALA Lists

To get the sensitive let's use `search_all()` again, this time using the `lists` argument to find any lists that match `New South Wales`.

```{python}
galah.search_all(lists="New South Wales")
```

Two lists are returned, and both appear relevant. The additional columns returned by `search_all()` help us determine that although both are authoritative, only one contains threatened species. 

```{python}
galah.search_all(lists="New South Wales")[["dataResourceUid", "listType", "isAuthoritative", "isThreatened"]]
```

In this case, we can use list ID `dr650` to narrow our species list to only those also on the New South Wales Conservation List by adding `dataResourceUid=dr650` to `filters`. Our query shows that there were 21 threatened species in Yass Valley in 2023.

```{python}
yass_threatened = galah.atlas_species(
  polygon=yass_valley["geometry"][127],
  filters=["year=2023", "dataResourceUid=dr650"],
  counts=True
  )
yass_threatened
```

If we want to get only the sensitive species list, we can instead use the list 
ID `dr487`.

```{python}
yass_sensitive = galah.atlas_species(
  polygon=yass_valley["geometry"][127],
  filters=["year=2023", "dataResourceUid=dr487"],
  counts=True
  )
yass_sensitive
```

# Own List

To use our example threatened list, download it here: {{< downloadthis ../data/example_TSL.csv >}}

To use our example sensitive list, download it here: {{< downloadthis ../data/example_SSL.csv >}}

First, let's read in the list and see what the list looks like.

```{python}
#| eval: false
#| echo: true
import pandas as pd
threatened_list = pd.read_csv("example_TSL.csv")
sensitive_list = pd.read_csv("example_SSL.csv")
```

For this example, we have included only the species that were displayed on the other tab.  However, this exercise can be done with any list.

```{python}
#| eval: true
#| echo: false
import pandas as pd
threatened_list = pd.read_csv("../data/example_TSL.csv")
sensitive_list = pd.read_csv("../data/example_SSL.csv")
```

Now, we will use the `isin()` function in `pandas` to select only the names in `species_yass` that 
are on our example list.

```{python}
yass_threatened = species_yass[species_yass['Species Name'].isin(list(threatened_list['species name']))].reset_index(drop=True)
yass_threatened
```

We can now do the same thing for the sensitive species list.
```{python}
yass_sensitive =  species_yass[species_yass['Species Name'].isin(list(sensitive_list['species name']))].reset_index(drop=True)
yass_sensitive
```

:::

# Plot species

Now that we've got the list of species, it's time to visualise this data on waffle charts.  For this part of the post, you will need `pywaffle`.  We can use the data frames including threatened, sensitive 
and remaining species to make plots comparing proportion of threatened/sensitive species with 
non-threatened species, as well as the kinds of species that are threatened/sensitive.

For the colours chosen so they would be color-blind friendly, we used [David Nichol's website](https://davidmathlogic.com/colorblind/#%23EAEAD8-%231E88E5-%23F7E9C3-%2324DCBD-%2343006B), and to blend two colours together to get a gradient, we used [the ColorHexa website](https://www.colorhexa.com/43006b-to-eaead8).

```{python}
#| code-fold: true
#| echo: true
#| eval: false

# add packages
import matplotlib 
import matplotlib.pyplot as plt
from pywaffle import Waffle 

# initialise figure
fig = plt.figure(figsize=(10,6))
fig.add_subplot(211) # Top Long Waffle Chart #211
fig.add_subplot(212) # Bottom Left Sensitive/Threatened # 223

# set the axes for separate plotting
ax1, ax2 = fig.axes

# # Modify existing axis and set aspect to equal
ax1.set_aspect(aspect="equal")
ax2.set_aspect(aspect="equal")

# make sure there are unique colours for each species
remaining_species = species_yass.shape[0] - (yass_sensitive.shape[0] + yass_threatened.shape[0])
all_species = [yass_sensitive.shape[0],yass_threatened.shape[0],remaining_species]

# add title over all plots
plt.suptitle("Species in Yass Valley in 2023",fontsize=20)

# add extra text
percentage = round(float(yass_sensitive.shape[0] + yass_threatened.shape[0]) / species_yass.shape[0], 4)*100
fig.text(0.56,0.44,"*1 square = 1 species",fontsize=12)
fig.text(0.56,0.22,"{}%".format(percentage),fontsize=56)
fig.text(0.56,0.18,"Threatened/Sensitive Species",fontsize=12)

# waffle chart
Waffle.make_waffle(
    ax=ax1,
    rows=15,
    values=all_species, 
    colors = ["#43006B","#F5F560","#C5C5C5"],
    legend={
        'labels': ["Sensitive","Threatened","Remaining"],
        'loc': 'upper left',
        'bbox_to_anchor': (0.23, 1.2),
        'ncol': 3,
        'framealpha': 0,
        'fontsize': 10
    }
)

# separate into birds, mammals, reptiles, plants and other
birds = yass_sensitive[yass_sensitive["Class"] == "Aves"].shape[0] + yass_threatened[yass_threatened["Class"] == "Aves"].shape[0]
mammals = yass_sensitive[yass_sensitive["Class"] == "Mammalia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Mammalia"].shape[0]
reptiles = yass_sensitive[yass_sensitive["Class"] == "Reptilia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Reptilia"].shape[0]
plants = yass_sensitive[yass_sensitive["Kingdom"] == "Plantae"].shape[0] + yass_threatened[yass_threatened["Kingdom"] == "Plantae"].shape[0]
other = (yass_sensitive.shape[0] + yass_threatened.shape[0]) - (birds + mammals + reptiles + plants)

# get counts and add them to labels
group_count = [birds,mammals,reptiles,plants,other]

# make the labels with number of unique species in label
group_labels = ["Birds","Mammals","Reptiles","Plants","Other"]

# Make types breakdown waffle chart
Waffle.make_waffle(
    ax=ax2,
    rows=5,
    values=group_count, 
    colors = ["#620477","#8e0e71","#b0223d","#d37a3e","#eacc54"],
    legend={
        'labels': group_labels,
        'loc': 'upper right',
        'bbox_to_anchor': (1.7, 1.02),
        'ncol': 1,
        'framealpha': 0,
        'fontsize': 10
    }
)
```

```{python}
#| column: screen-inset
#| fig-align: center
#| fig-height: 9
#| fig-width: 10
#| echo: false
#| eval: true
#| warning: false
#| message: false

# add packages
import matplotlib 
import matplotlib.pyplot as plt
from pywaffle import Waffle 

# initialise figure
fig = plt.figure(figsize=(10,6))
fig.add_subplot(211) # Top Long Waffle Chart #211
fig.add_subplot(212) # Bottom Left Sensitive/Threatened # 223

# set the axes for separate plotting
ax1, ax2 = fig.axes

# # Modify existing axis and set aspect to equal
ax1.set_aspect(aspect="equal")
ax2.set_aspect(aspect="equal")

# make sure there are unique colours for each species
remaining_species = species_yass.shape[0] - (yass_sensitive.shape[0] + yass_threatened.shape[0])
all_species = [yass_sensitive.shape[0],yass_threatened.shape[0],remaining_species]

# add title over all plots
plt.suptitle("Species in Yass Valley in 2023",fontsize=20)

# add extra text
percentage = round(float(yass_sensitive.shape[0] + yass_threatened.shape[0]) / species_yass.shape[0], 4)*100
fig.text(0.56,0.44,"*1 square = 1 species",fontsize=12)
fig.text(0.56,0.22,"{}%".format(percentage),fontsize=56)
fig.text(0.56,0.18,"Threatened/Sensitive Species",fontsize=12)

# waffle chart
Waffle.make_waffle(
    ax=ax1,
    rows=15,
    values=all_species, 
    colors = ["#43006B","#F5F560","#C5C5C5"],
    legend={
        'labels': ["Sensitive","Threatened","Remaining"],
        'loc': 'upper left',
        'bbox_to_anchor': (0.23, 1.2),
        'ncol': 3,
        'framealpha': 0,
        'fontsize': 10
    }
)

# separate into birds, mammals, reptiles, plants and other
birds = yass_sensitive[yass_sensitive["Class"] == "Aves"].shape[0] + yass_threatened[yass_threatened["Class"] == "Aves"].shape[0]
mammals = yass_sensitive[yass_sensitive["Class"] == "Mammalia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Mammalia"].shape[0]
reptiles = yass_sensitive[yass_sensitive["Class"] == "Reptilia"].shape[0] + yass_threatened[yass_threatened["Class"] == "Reptilia"].shape[0]
plants = yass_sensitive[yass_sensitive["Kingdom"] == "Plantae"].shape[0] + yass_threatened[yass_threatened["Kingdom"] == "Plantae"].shape[0]
other = (yass_sensitive.shape[0] + yass_threatened.shape[0]) - (birds + mammals + reptiles + plants)

# get counts and add them to labels
group_count = [birds,mammals,reptiles,plants,other]

# make the labels with number of unique species in label
group_labels = ["Birds","Mammals","Reptiles","Plants","Other"]

# Make types breakdown waffle chart
Waffle.make_waffle(
    ax=ax2,
    rows=5,
    values=group_count, 
    colors = ["#620477","#8e0e71","#b0223d","#d37a3e","#eacc54"],
    legend={
        'labels': group_labels,
        'loc': 'upper right',
        'bbox_to_anchor': (1.7, 1.02),
        'ncol': 1,
        'framealpha': 0,
        'fontsize': 10
    }
)

plt.show()
```

# Final thoughts

We hope this post has helped you understand how to make a species list use it to find threatened or sensitive species are in an area. It's useful to combine species lists with other sources of information like migration patterns or seasonality to help determine at what times species inhabit an area.

For other Python posts, check out [How to make a map in less than 5 minutes](ala-labs.org.au), or a more advanced version, [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).

To request more posts like this, or to ask further questions, feel free to [email us](support@ala.org.au).

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>
